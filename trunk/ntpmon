#!/usr/bin/perl -Tw
#
# Author:       Paul Gear
# Copyright:	(c) 2010 Liberty Systems & Software <http://libertysys.com.au/>
# License:	GPLv3 <http://www.gnu.org/licenses/gpl.html>
# Description:  Script to collect, dump, and display NTP health metrics using
#		RRDtool.
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.  
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use CGI qw/:standard start_ul/;
#use Data::Dumper;
use File::Basename;
use Getopt::Long;
use RRDs;
use Scalar::Util qw(tainted);

# globals
my $debug;
my $res;
my $libdir;
my $imagedir;
my $baseurl;
my $imageurl;

# constants
my $xff = "0.5";
my $baseinterval = 60;
my $maxinterval = 2048;
my $ext = ".rrd";
my $now = time();
my $seconds_in_year = 366 * 24 * 60 * 60;	# includes leap year just to be sure
my $good = 0;
my $marginal = 1;
my $bad = 2;
my $ntpq_command = "ntpq -pn";

my @summary_statnames = (
    "HOST",
    "lastpoll",
    "lastsync",
    "numpeers",
    "numsurvivors",
    "offsetsurvivors",
    "offsetdiscards",
    "reachability",
);
my %statformats = (
    TIME		=> "TIME",
    lastpoll		=> "TIME",
    lastsync		=> "TIME",
    numpeers		=> "%d",
    numsurvivors	=> "%d",
    numdiscards		=> "%d",
    numunknown		=> "%d",
    offsetsurvivors	=> "%5.3f",
    offsetsyncpeer	=> "%5.3f",
    offsetdiscards	=> "%5.3f",
    reachability	=> "%5.3f",
    insync		=> "%d",
);
my %statheadings = (
    lastpoll		=> "Last poll",
    lastsync		=> "Last sync",
    numpeers		=> "Configured peers",
    numdiscards		=> "Non-working peers",
    numsurvivors	=> "Working peers",
    numunknown		=> "Unknown peers<br/><small>(if non-zero, please <a href=\"mailto:ntpmon\@libertsys.com.au?subject=ntpmon unknown peer bug report&body=Please supply ntpq output from the host in question\">report a bug</a>)</small>",
    offsetsurvivors	=> "Average working peer offset",
    offsetsyncpeer	=> "Sync peer offset",
    offsetdiscards	=> "Average non-working peer offset",
    reachability	=> "Average peer reachability",
    insync		=> "In sync?",
    HOST		=> "Host",
);
my %rules = (
    lastsync		=> [ $now-$maxinterval, $now-$maxinterval/2, [ $bad, $good, $marginal ] ],
    numpeers		=> [   2,    3, [ $bad, $good, $marginal ] ],
    numsurvivors	=> [   2,    3, [ $bad, $good, $marginal ] ],
    offsetdiscards	=> [ 500, 5000, [ $good, $good, $good ] ],
    offsetsurvivors	=> [  50,  250, [ $good, $bad, $marginal ] ],
    offsetsyncpeer	=> [  50,  250, [ $good, $bad, $marginal ] ],
    reachability	=> [   5,    7, [ $bad, $good, $marginal ] ],
);
my %sevcodes = (
    0			=> "good",
    1			=> "marginal",
    2			=> "bad"
);

# process arguments
my $result = GetOptions(
    "debug"		=> \$debug,
    "libdir"		=> \$libdir,
    "resolution"	=> \$res,
);

# set defaults for globals
$res = 60			unless defined $res;
$debug = (-t 0 ? 1 : 0)		unless defined $debug;
$libdir = "/var/lib/ntpmon"	unless defined $libdir;
$imagedir = "$libdir/images"	unless defined $imagedir;
$baseurl = "/ntpmon"		unless defined $baseurl;
$imageurl = "$baseurl/images"	unless defined $imageurl;

my $heartbeat = $res * 2;
my @rrd_definition = (
    "DS:insync:GAUGE:$heartbeat:0:1",
    "DS:numdiscards:GAUGE:$heartbeat:0:U",
    "DS:numpeers:GAUGE:$heartbeat:0:U",
    "DS:numsurvivors:GAUGE:$heartbeat:0:U",
    "DS:numunknown:GAUGE:$heartbeat:0:U",
    "DS:offsetdiscards:GAUGE:$heartbeat:0:U",
    "DS:offsetsurvivors:GAUGE:$heartbeat:0:U",
    "DS:offsetsyncpeer:GAUGE:$heartbeat:0:U",
    "DS:reachability:GAUGE:$heartbeat:0:8",
    "RRA:LAST:$xff:1:1440",
    "RRA:MIN:$xff:1:1440",
    "RRA:MAX:$xff:1:1440",
    "RRA:AVERAGE:$xff:1:1440",
    "RRA:LAST:$xff:60:168",
    "RRA:MIN:$xff:60:168",
    "RRA:MAX:$xff:60:168",
    "RRA:AVERAGE:$xff:60:168",
    "RRA:LAST:$xff:1440:365",
    "RRA:MIN:$xff:1440:365",
    "RRA:MAX:$xff:1440:365",
    "RRA:AVERAGE:$xff:1440:365",
);

# create directories if needed
if (! -d $libdir) {
    mkdir "$libdir" or die "Cannot make directory $libdir: $!";
}
chdir "$libdir" or die "Cannot change directory to $libdir: $!";


##############################################################################
# utilities
##############################################################################

sub usage ()
{
    print STDERR "Usage: $0 [global options] [command] [argument ...]
Commands:
	collect HOSTNAME	Collect and store data for HOSTNAME
	dump HOSTNAME		Display recent data for HOSTNAME
	summary			Display summary page in HTML
	host HOSTNAME		Display detail page for HOSTNAME in HTML
	help			Display HTML help page
Global options:
	--debug			Display debugging information
	--libdir		Set directory for RRD storage
	--imagedir		Set directory for RRD image storage
	--resolution		Set resolution of RRD data (default 1 minute)
";
    exit 1;
}

sub all_hosts ()
{
    my @list;
    for my $f (sort glob "$libdir/*$ext") {
	my $host = basename($f, $ext);
	#print STDERR "Found $host\n" if $debug;
	push @list, $host;
    }
    return @list;
}

sub untaint ($)
{
    return $_[0] unless tainted($_[0]);
    $_[0] =~ /([-.\w\s]+)/;
    return $1;
}

sub fetch_rrd (@)
{
    my $remove_empty_rows = shift;
    my ($start, $step, $names, $data) = RRDs::fetch(@_);
    my $err = RRDs::error();
    warn "ERROR: $err" if $err;

    if ($remove_empty_rows) {
	# remove empty rows from the returned data set
	my @newdata = ();
	for my $line (@$data) {
	    my $count = 0;
	    for my $val (@$line) {
		++$count if defined $val;
	    }
	    push @newdata, $line if $count > 0;
	}
	$data = \@newdata;
    }

    return ($start, $step, $names, $data);
}

sub get_ntpq ($)
{
    # untaint environment
    $ENV{"PATH"} = "/usr/sbin:/usr/bin:/sbin:/bin";
    $ENV{"ENV"} = "";

    my $host = shift;
    open NTPQ, "$ntpq_command $host|" or warn "Cannot open pipe for reading ntpq results: $!";
    my @output = <NTPQ>;
    close NTPQ;
    chomp @output;
    return @output;
}

sub nbsp ($)
{
    my $str = $_[0];
    $str =~ s/ +/&nbsp;/g;
    return $str;
}

sub format_stat ($$)
{
    my ($name, $value) = @_;
    my $str;

    # if there's no format for it, just return it
    return $value unless exists $statformats{$name};

    # if it's non-numeric, just return it
    return $value unless $value =~ /^\s*[\d.]+\s*$/;

    if ($statformats{$name} eq "TIME") {
	$str = nbsp(scalar localtime($value));
    }
    else {
	$str = sprintf($statformats{$name}, $value);
    }

    return $str;
}

##############################################################################
# collect data and create/update rrd
##############################################################################

sub ntpmon_collect_host ($)
{
    my $host = untaint($_[0]);
    print "host = $host\n" if $debug;

    # get output from ntpq
    my @output = get_ntpq($host);

    my $insync = 0;
    my $numdiscards = 0;
    my $numpeers = 0;
    my $numunknown = 0;
    my $numsurvivors = 0;
    my $offsetdiscards = 0;
    my $offsetsurvivors = 0;
    my $offsetsyncpeer = 0;
    my $reachability = 0;

    for (@output) {
	# skip headers
	next if /remote\s+refid\s+st\s+t\s+when\s+poll\s+reach\s+delay\s+offset\s+jitter/;
	next if /^=+$/;

	# get the tally code in the first column
	my ($tally, $rest) = ($_ =~ /(.)(.*)/);

	# split fields & validate
	my @F = split /\s+/, $rest;
	if ($#F != 9) {
	    print STDERR "Invalid line: $_\n";
	}

	# give the fields sensible names
	my ($peer, $refid, $stratum, $type, $lastpoll, $interval, $reach, $delay, $offset, $jitter) = @F;

	next if $refid eq ".LOCL.";	# skip local clock
	next if $refid eq ".INIT.";	# skip peers which have never worked

	# see the explanation of tally codes in the ntpq documentation for how these work:
	# - http://psp2.ntp.org/bin/view/Support/TroubleshootingNTP
	# - http://www.eecis.udel.edu/~mills/ntp/html/decode.html#peer
	# - http://www.eecis.udel.edu/~mills/ntp/html/ntpq.html
	if ($tally =~ /[*o]/) {
	    # synced peer
	    $lastpoll = 1 if ($lastpoll eq "-");
	    $insync = 1;
	    ++$numsurvivors;
	    ++$numpeers;
	    $offsetsurvivors += abs($offset);
	    $offsetsyncpeer += abs($offset);
	} elsif ($tally =~ /[+#]/) {
	    # valid peer
	    ++$numsurvivors;
	    ++$numpeers;
	    $offsetsurvivors += abs($offset);
	} elsif ($tally =~ /[ x.-]/) {
	    # discarded peer
	    ++$numdiscards;
	    ++$numpeers;
	    $offsetdiscards += abs($offset);
	} else {
	    # unknown
	    ++$numunknown;
	    next;
	}

	# determine how many of the last 8 polls succeeded
	my $reachdec = oct($reach);	# convert reach to decimal
	my $bits = $reachdec & 1;	# set lowest bit
	#print "bits = $bits, reach = $reachdec\n";
	my $i = 1;
	while ($i < 8) {		# loop through remaining bits
	    $reachdec >>= 1;
	    $bits += $reachdec & 1;
	    #print "bits = $bits, reach = $reachdec\n";
	    ++$i;
	}
	# reachability = sum of all reachability bit counts (average calculated at end)
	$reachability += $bits;

	# debugging
	print "|$tally|$peer|$lastpoll|$bits($reach)|$offset|\n" if $debug;
    }

    my $err;

    # create file if necessary
    if (! -e "$libdir/$host$ext") {
	RRDs::create( "$host$ext", "--step", "$res", @rrd_definition );
	$err = RRDs::error;
	warn "Cannot create RRD $libdir/$host$ext: $err" if $err;
    }

    my $template = "insync:numdiscards:numpeers:numsurvivors:numunknown";
    my $data = "$insync:$numdiscards:$numpeers:$numsurvivors:$numunknown";

    # do not add data if we have none
    if ($numsurvivors > 0) {
	$template .= ":offsetsurvivors";
	$data .= ":" . ($offsetsurvivors / $numsurvivors);
    }
    if ($numdiscards > 0) {
	$template .= ":offsetdiscards";
	$data .= ":" . ($offsetdiscards / $numdiscards);
    }
    if ($insync > 0) {
	$template .= ":offsetsyncpeer";
	$data .= ":$offsetsyncpeer";
    }
    if ($numpeers > 0) {
	$template .= ":reachability";
	$data .= ":" . ($reachability / $numpeers);
    }

    # add stats
    RRDs::update( "$libdir/$host$ext", "--template=$template", "N:$data" );
    $err = RRDs::error;
    warn "Cannot update RRD $libdir/$host$ext: $err" if $err;

}

sub ntpmon_collect (@)
{
    for my $host (@_) {
	ntpmon_collect_host $host;
    }
}

##############################################################################
# dump data from rrd
##############################################################################

sub dump_rrd (@)
{
    my ($file, $start, $step, $names, $data) = @_;

    # cut & paste from the RRDs perldoc page
    print "Host:	$file\n";
    print "Start:       ", scalar localtime($start), " ($start)\n";
    print "Resolution:  $step seconds\n";
    print "DS names:    ", join (", ", @$names)."\n";
    print "Data points: ", $#$data + 1, "\n";
    print "Data:\n";

    for my $line (@$data) {
	# skip blank rows
    #    my $count = 0;
    #    for my $val (@$line) {
    #	++$count if defined $val;
    #    }
    #    next unless $count > 0;

	print "  ", scalar localtime($start), " ($start) ";
	$start += $step;
	for my $val (@$line) {
	    if (defined $val) {
		printf "%6.2f ", $val;
	    }
	    else {
		printf "   n/a ";
	    }
	}
	print "\n";
    }

}

sub ntpmon_dump (@)
{
    for my $host (@_) {
	my $minutes = 5;
	my $time = time();
	my $end = int($time / $baseinterval) * $baseinterval;
	#my $strt = $end - $baseinterval;
	#print "time = $time, strt = $strt, end = $end\n";
	#print "time = $time, end = $end\n" if $debug;

	#dump_rrd( "$host$ext", "LAST", "-s", "$end-${res}sec", "-e", "$end" );
	dump_rrd( $host, fetch_rrd( 1, "$host$ext", "LAST", "-r", $baseinterval,
	    "-s", "$end-${minutes}min", "-e", "$end" ) );
    }
}

##############################################################################
# HTML summary page
##############################################################################

sub host_headings (@)
{
    my $ret = "";
    for my $stat (@summary_statnames) {
	$ret .= th( { -class => "header" },
		 a( {href => "help.html\#$stat"}, $statheadings{$stat} ) ) . "\n";
    }
    return $ret;
}

# get the timestamp when insync was last true
sub get_last_insync ($$)
{
    my ($file, $time) = @_;
    my $insync = 0;

    my @result = fetch_rrd(0, $file, "LAST", "-s", $time - $maxinterval, "-e", $time);

    #dump_rrd(@result);
    my ($start, $step, $names, $data) = @result;
    if ($names->[0] ne "insync") {
	warn "Expected insync as first DS, but got $names->[0]";
	next;
    }
    #print STDERR "data has $#$data elements\n" if $debug;
    my $i = $#$data;
    while ($i > 0) {
	$insync = $data->[$i]->[0] if exists $data->[$i]->[0];
	if ($insync) {
	    #print "$file insync at " . localtime($time) . "\n" if $debug;
	    return $time;
	}
	$time -= $step;
	--$i;
    }

    # if we get here, time was not in sync in a reasonable period of time
    return 0;
}

# return recent recorded values in a hash
sub get_host_rrd ($)
{
    my $file = "$_[0]$ext";
    my $lastpoll = RRDs::last($file);
    my $lastsync = get_last_insync($file, $lastpoll);
    my ($start, $step, $names, $data) = fetch_rrd(1, $file, "LAST", "-s", $lastpoll-$res*5,
	"-e", $lastpoll);
#    print "start = $start, step = $step, lastpoll = $lastpoll, lastsync = $lastsync\n"
#	if $debug;
    my $ret;
    $ret->{"lastsync"} = $lastsync;
    $ret->{"lastpoll"} = $lastpoll;
    if ($#$data < 0) {
    }
    else {
	for my $i (0 .. $#$names) {
	    #print "$names->[$i] = $data->[$#$data]->[$i]\n";
	    $ret->{$names->[$i]} = $data->[$#$data]->[$i];
	}
    }
    return $ret;
}

# work out which of the stats are good, bad, or marginal
# return the result for each stat, an overall result, and the name of the worst stat
sub analyse_stats ($)
{
    my $stats = $_[0];

    my $worst = $good;	# severity of the worst stat
    my $results;

    # loop through selected stats and decide which is the worst
    for my $stat (keys %rules) {
	my $val = $stats->{$stat};
	my $low = $rules{$stat}->[0];
	my $high = $rules{$stat}->[1];
	my $status = $rules{$stat}->[2];

	my $newsev = 0;
	next unless defined $val;
	if ($val < $low) {
	    $newsev = $status->[0];
	}
	elsif ($val >= $high) {
	    $newsev = $status->[1];
	}
	else {
	    $newsev = $status->[2];
	}
	$results->{$stat} = $sevcodes{$newsev};
	if ($newsev > $worst) {
	    $worst = $newsev;
	    $results->{"worst"} = $stat;
	}

	#print "stat = $stat, val = $val, low = $low, high = $high, sev = $worst ($sevcodes{$worst})\n";
    }
    $results->{"overall"} = $sevcodes{$worst};

    #print "overall = $sevcodes{$worst}, worst = $results{'worst'}\n";
    return $results;
}

# get the host's stats from the database
# analyse the host stats and include a good/marginal/bad status
# return the results in a hash
sub get_host_stats ($)
{
    my $stats = get_host_rrd($_[0]);
    my $results = analyse_stats($stats);
    #print Dumper($stats, $results);
    return ($stats, $results);
}

# return all the stats for the given host in HTML td elements with appropriate links
sub host_stats ($$$)
{
    my ($host, $stats, $results) = @_;
    my $ret = "";
    for my $statname (@summary_statnames) {
	next if $statname eq "HOST";
	if (!defined $stats->{$statname}) {
	    $stats->{$statname} = "n/a";
	}
	my $statstr = format_stat($statname, $stats->{$statname});
	my %html_attrs;
	if (exists $results->{$statname}) {
	    $html_attrs{"-class"} = $results->{$statname};
	}
	$ret .= td( \%html_attrs, $statstr ) . "\n";
    }
    return $ret;
}

# return an appropriate link to the host
sub host_link ($$)
{
    my ($host, $results) = @_;
    my $params = "host=$host";
    if (exists $results->{"worst"}) {
	$params .= "#" . $results->{'worst'};
    }
    #my $self = url(-relative => 1);
    my $self = self_url();
    #print "params = $params\n";
    return a({href => "$self?$params"}, $host);
}

# return an HTML Tr containing all the data for a given host
sub host_tr ($)
{
    my $host = $_[0];
    #print "host: $host\n";
    my ($stats, $results) = get_host_stats($host);
    return Tr(
	th({ -class => $results->{"overall"} }, host_link($host, $results)) . "\n",
	host_stats($host, $stats, $results)
    );
}

sub host_rows (@)
{
    return map( host_tr($_), @_ );
}

sub cgi_env_dump ($)
{
    my $ret = "command = $_[0]";
    for my $arg (@ARGV) {
	$ret .= "$arg<br/>\n";
    }
    for (sort keys %ENV) {
	$ret .= "$_ => $ENV{$_}" . "<br/>\n";
    }
    return $ret;
}

sub html_body ($@)
{
    my $title = shift;
    print
	header(),
	start_html(
	    -title	=> $title,
	    -style	=> { src => "$baseurl/style.css" },
	    -head	=> meta({ -http_equiv => "refresh", content => "60" }),
	),
	h3( $title ), "\n", @_;
    print end_html();
}

sub current_time ()
{
    return p( "Current time: " . localtime($now) . "\n" );
}

sub ntpmon_summary ()
{
    html_body( "NTP status summary", current_time(),
	table( Tr( host_headings() ), host_rows( all_hosts() ) ) );
}

sub ntpq_output ($)
{
    my $host = shift;
    my @output = get_ntpq($host);
    return h3("Current '$ntpq_command' output"),
	textarea( -name => "ntpq_output", -default => join("\n", @output),
	-rows => $#output + 1, -columns => 80 );
}

sub metric_headings ($)
{
    my $names = shift;
    my $ret = "";
    for my $metric (@$names) {
	$ret .= th( { -class => "header" },
	    exists $statheadings{$metric} ? $statheadings{$metric} : $metric ) . "\n";
    }
    return $ret;
}

sub metric_row ($$)
{
    my ($names, $data) = @_;
    my $ret = "";
    for my $i (0 .. $#$names) {
	$ret .= td(format_stat($names->[$i], exists $data->[$i] ? $data->[$i] : 0));
    }
    return $ret;
}

sub metric_rows ($$$@)
{
    my ($host, $num, $lastpoll, $start, $step, $names, $data) = @_;

    my $ret = "";

    my $i = $#$data;
    while ($i > 0) {
	my $time = $start + $step * $i;
	#printf STDERR "i=$i time=$time\n";
	if ($time > $now) {
	    --$i;
	    next;
	}
	my $row = td( format_stat("TIME", $time) );
	$row .= metric_row( $names, $data->[$i] );
	last if $num <= 0;
	--$num;
	--$i;
	$ret .= Tr($row, "\n");
    }

    return $ret;
}

sub last_polls ($$)
{
    my $host = shift;
    my $num = shift;

    my $file = "$host$ext";
    my $lastpoll = RRDs::last($file);
    my @data = fetch_rrd(0, $file, "LAST", "-s", $lastpoll - $maxinterval, "-e", $lastpoll);

    return h3( "Last $num polls" ),
	table( Tr( th( { -class => "header" }, "Time" ), metric_headings($data[2]) ),
	    metric_rows($host, $num, $lastpoll, @data) );
}

my @global_graphdef = (
    "--lower-limit=0",
    #"--lazy",
    #"--watermark=ntpmon: Copyright (c) 2010 Liberty Systems & Software",
);

sub create_graphs ($$$@)
{
    my ($host, $name, $title, @graphdef) = @_;
    my @list;
    for my $scope ("hour", "day", "week") {	#, "month", "year"
	my $basename = "$host-$name-$scope.png";
	RRDs::graph("$imagedir/$basename",
	    "--start=e-1$scope",
	    "--title=$title - last $scope",
	    @global_graphdef,
	    @graphdef);
	my $err = RRDs::error;
	if ($err) {
	    push @list, span( {-class=>"error" }, "RRDs::error $err" );
	}
	else {
	    push @list, img( {-src=>"$imageurl/$basename" } );
	}
    }
    return @list;
}

sub graph_sync ($)
{
    my $host = shift;
    my @graphdef = (
	"--alt-autoscale-max",
	"DEF:insync=$host$ext:insync:LAST",
	"LINE1:insync#000000:Synchronization status (1 = sync, 0 = no sync)",
    );
    return
	a({-name => "lastsync"}) . "\n" .
	a({-name => "insync"}) . "\n" .
	h3("Synchronization status") . "\n" .
	join("\n", create_graphs($host, "sync", "$host synchronization status", @graphdef));
}

sub graph_peers ($)
{
    my $host = shift;
    my @graphdef = (
	"--alt-autoscale-max",
	"DEF:peers=$host$ext:numpeers:LAST",
	"DEF:survivors=$host$ext:numsurvivors:LAST",
	"DEF:discards=$host$ext:numdiscards:LAST",
	"DEF:unknown=$host$ext:numunknown:LAST",
	"VDEF:peersmin=peers,MINIMUM",
	"VDEF:peersavg=peers,AVERAGE",
	"VDEF:peersmax=peers,MAXIMUM",
	"VDEF:survivorsmin=survivors,MINIMUM",
	"VDEF:survivorsavg=survivors,AVERAGE",
	"VDEF:survivorsmax=survivors,MAXIMUM",
	"VDEF:discardsmin=discards,MINIMUM",
	"VDEF:discardsavg=discards,AVERAGE",
	"VDEF:discardsmax=discards,MAXIMUM",
	"VDEF:unknownmin=unknown,MINIMUM",
	"VDEF:unknownavg=unknown,AVERAGE",
	"VDEF:unknownmax=unknown,MAXIMUM",
	"AREA:survivors#00FF00:Working peers     ",
	"GPRINT:survivorsmin:%6.2lf min",
	"GPRINT:survivorsavg:%6.2lf avg",
	"GPRINT:survivorsmax:%6.2lf max",
	"STACK:discards#FF0000:Non-working peers ",
	"GPRINT:discardsmin:%6.2lf min",
	"GPRINT:discardsavg:%6.2lf avg",
	"GPRINT:discardsmax:%6.2lf max",
	"LINE2:peers#000000:Configured peers  ",
	"GPRINT:peersmin:%6.2lf min",
	"GPRINT:peersavg:%6.2lf avg",
	"GPRINT:peersmax:%6.2lf max",
	"AREA:unknown#0000FF:Unknown peers     ",
	"GPRINT:unknownmin:%6.2lf min",
	"GPRINT:unknownavg:%6.2lf avg",
	"GPRINT:unknownmax:%6.2lf max",
	"HRULE:3#AAAAAA:Minimum viable working peers",
    );
    return
	h3("Peer counts") . "\n" .
	a({-name => "numpeers"}) . "\n" .
	a({-name => "numsurvivors"}) . "\n" .
	a({-name => "numdiscards"}) . "\n" .
	a({-name => "numunknown"}) . "\n" .
	join("\n", create_graphs($host, "peers", "$host peer counts", @graphdef));
}

sub graph_offsets ($)
{
    my $host = shift;
    my @graphdef = (
	#"--upper-limit=1",
	"--alt-autoscale-max",
	"--vertical-label=Milliseconds",
	"DEF:survivors=$host$ext:offsetsurvivors:LAST",
	"DEF:syncpeer=$host$ext:offsetsyncpeer:LAST",
	"DEF:discards=$host$ext:offsetdiscards:LAST",
	"CDEF:survivorsecs=survivors,1000,/",
	"CDEF:syncpeersecs=syncpeer,1000,/",
	"CDEF:discardsecs=discards,1000,/",
	"VDEF:survivorsmin=survivors,MINIMUM",
	"VDEF:survivorsavg=survivors,AVERAGE",
	"VDEF:survivorsmax=survivors,MAXIMUM",
	"VDEF:syncpeermin=syncpeer,MINIMUM",
	"VDEF:syncpeeravg=syncpeer,AVERAGE",
	"VDEF:syncpeermax=syncpeer,MAXIMUM",
	"VDEF:discardsmin=discards,MINIMUM",
	"VDEF:discardsavg=discards,AVERAGE",
	"VDEF:discardsmax=discards,MAXIMUM",
	"LINE3:survivors#00FF00:Working peers     ",
	"GPRINT:survivorsmin:%5.2lf min",
	"GPRINT:survivorsavg:%6.2lf avg",
	"GPRINT:survivorsmax:%7.2lf max",
	"LINE2:discards#FF0000:Non-working peers ",
	"GPRINT:discardsmin:%5.2lf min",
	"GPRINT:discardsavg:%6.2lf avg",
	"GPRINT:discardsmax:%7.2lf max",
	"LINE2:syncpeer#8000CC:Sync peer         ",
	"GPRINT:syncpeermin:%5.2lf min",
	"GPRINT:syncpeeravg:%6.2lf avg",
	"GPRINT:syncpeermax:%7.2lf max",
	"HRULE:50#AAAAAA:Maximum preferred offset",
	"HRULE:250#555555:Maximum viable offset",
    );
    return
 	h3("Time offset") . "\n" .
	a({-name => "offsetsurvivors"}) . "\n" .
	a({-name => "offsetsyncpeer"}) . "\n" .
	a({-name => "offsetdiscards"}) . "\n" .
	join("\n", create_graphs($host, "offsets", "$host time offset", @graphdef));
}

sub graph_reachability ($)
{
    my $host = shift;
    my @graphdef = (
	"--upper-limit=8",
	"--vertical-label=(out of last 8 polls)",
	"DEF:reachability=$host$ext:reachability:LAST",
	"VDEF:reachmin=reachability,MINIMUM",
	"VDEF:reachavg=reachability,AVERAGE",
	"VDEF:reachmax=reachability,MAXIMUM",
	"LINE2:reachability#FFBB00:Average peer reachability",
	"GPRINT:reachmin:%6.2lf min",
	"GPRINT:reachavg:%6.2lf avg",
	"GPRINT:reachmax:%6.2lf max",
	"HRULE:7#AAAAAA:Minimum preferred reachability",
	"HRULE:5#555555:Minimum viable reachability",
    );
    return
	a({-name => "reachability"}) . "\n" .
	h3("Peer reachability") . "\n" .
	join("\n", create_graphs($host, "reachability", "$host peer reachability", @graphdef));
}

sub graphs_rrd ($)
{
    my $host = shift;
    my $ret = "";
    $ret .= graph_sync($host);
    $ret .= graph_peers($host);
    $ret .= graph_offsets($host);
    $ret .= graph_reachability($host);
    return $ret;
}

sub ntpmon_host ($)
{
    my $host = untaint(shift);
    html_body( "NTP status summary for $host", current_time(),
	graphs_rrd($host), ntpq_output($host), last_polls($host, 5) );
}

sub ntpmon_cgi ()
{
    my $host = param("host");
    if (defined $host) {
	ntpmon_host($host);
    }
    else {
	ntpmon_summary();
    }
}

##############################################################################
# main
##############################################################################

# get parameters
my $command = shift;

# call appropriate function for argument
if (! defined $command  or  $command eq "") {
    if (-t 0) {
	usage();
    }
    else {
	ntpmon_cgi();
    }
}
elsif ($command eq "collect") {
    if ($#ARGV < 0) {
	@ARGV = all_hosts();
    }
    ntpmon_collect(@ARGV);
}
elsif ($command eq "dump") {
    if ($#ARGV < 0) {
	@ARGV = all_hosts();
    }
    ntpmon_dump(@ARGV);
}
elsif ($command eq "host") {
    ntpmon_host($ARGV[0]);
}
elsif ($command eq "summary") {
    ntpmon_cgi();
}
else {
    usage();
}

